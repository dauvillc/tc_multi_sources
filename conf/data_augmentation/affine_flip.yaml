# Data augmentation config file.
# This cfg leads to the instantiation of a MultisourceDataAugmentation object.
_target_: multi_sources.data_processing.data_augmentation.MultisourceDataAugmentation
augmentation_functions:
  era5:
    # List of data augmentation classes. Such classes must be callable with the signature
    # `__call__(self, data: Dict[str, Any]) -> Dict[str, Any]`.
    # the function multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
    # can be used to wrap torchvision v2 transforms to the expected signature.
    # For the fill values, use ${nan:}.
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomHorizontalFlip
        p: 0.5
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomVerticalFlip
        p: 0.5
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomAffine
        degrees: 90
        translate: [0.5, 0.5]
        scale: [0.5, 1.0]
        fill: ${nan:}
  infrared:
  # Same as above
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomHorizontalFlip
        p: 0.5
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomVerticalFlip
        p: 0.5
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomAffine
        degrees: 90
        translate: [0.5, 0.5]
        scale: [0.5, 1.0]
        fill: ${nan:}
  pmw:
  # Same, but with no scaling as resolutions already vary
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomHorizontalFlip
        p: 0.5
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomVerticalFlip
        p: 0.5
    - _target_: multi_sources.data_processing.data_augmentation.wrap_tv_image_transform
      transform:
        _target_: torchvision.transforms.v2.RandomAffine
        degrees: 90
        translate: [0.25, 0.25]
        fill: ${nan:}